install.packages("shiny")
install.packages(c("leafem", "mlr3misc", "quarto", "renv", "rmarkdown", "tmap"))
```{r}
#| context: server
output$distPlot <- renderPlot({
x <- faithful[, 2]  # Old Faithful Geyser data
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
library(shiny)
sliderInput("bins", "Number of bins:",
min = 1, max = 50, value = 30)
plotOutput("distPlot")
#| context: server
output$distPlot <- renderPlot({
x <- faithful[, 2]  # Old Faithful Geyser data
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
# Chunk 1
library(shiny)
# Chunk 2
sliderInput("bins", "Number of bins:",
min = 1, max = 50, value = 30)
plotOutput("distPlot")
# Chunk 3
#| context: server
output$distPlot <- renderPlot({
x <- faithful[, 2]  # Old Faithful Geyser data
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
shiny::runApp()
# Chunk 1
library(shiny)
# Chunk 2
sliderInput("bins", "Number of bins:",
min = 1, max = 50, value = 30)
plotOutput("distPlot")
# Chunk 3
#| context: server
output$distPlot <- renderPlot({
x <- faithful[, 2]  # Old Faithful Geyser data
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
?shiny
runExample("01_hello")
# Chunk 1
#| panel: sidebar
vars <- setdiff(names(iris), "Species")
selectInput('xcol', 'X Variable', vars)
selectInput('ycol', 'Y Variable', vars, selected = vars[[2]])
numericInput('clusters', 'Cluster count', 3, min = 1, max = 9)
# Chunk 2
#| panel: fill
plotOutput('plot1')
# Chunk 3
#| context: server
selectedData <- reactive({
iris[, c(input$xcol, input$ycol)]
})
clusters <- reactive({
kmeans(selectedData(), input$clusters)
})
output$plot1 <- renderPlot({
palette(c("#E41A1C", "#377EB8", "#4DAF4A", "#984EA3",
"#FF7F00", "#FFFF33", "#A65628", "#F781BF", "#999999"))
par(mar = c(5.1, 4.1, 0, 1))
plot(selectedData(),
col = clusters()$cluster,
pch = 20, cex = 3)
points(clusters()$centers, pch = 4, cex = 4, lwd = 4)
})
#| panel: sidebar
vars <- setdiff(names(iris), "Species")
selectInput('xcol', 'X Variable', vars)
selectInput('ycol', 'Y Variable', vars, selected = vars[[2]])
numericInput('clusters', 'Cluster count', 3, min = 1, max = 9)
#| panel: fill
plotOutput('plot1')
#| context: server
selectedData <- reactive({
iris[, c(input$xcol, input$ycol)]
})
clusters <- reactive({
kmeans(selectedData(), input$clusters)
})
output$plot1 <- renderPlot({
palette(c("#E41A1C", "#377EB8", "#4DAF4A", "#984EA3",
"#FF7F00", "#FFFF33", "#A65628", "#F781BF", "#999999"))
par(mar = c(5.1, 4.1, 0, 1))
plot(selectedData(),
col = clusters()$cluster,
pch = 20, cex = 3)
points(clusters()$centers, pch = 4, cex = 4, lwd = 4)
})
library(tidyverse)
library(tidyverse)
# Chunk 1: load-packages
#| label: load-packages
#| include: false
library(tidyverse)
library(palmerpenguins)
library(shiny)
# Chunk 2
sliderInput("bins", "Number of bins:",
min = 1, max = 50, value = 30)
plotOutput("distPlot")
# Chunk 3
#| context: server
output$distPlot <- renderPlot({
x <- palmerpenguins[, 2]  # Old Faithful Geyser data
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
palmerpenguins::palmerpenguins[,2]
palmerpenguins::penguins
penguins[,3]
install.packages("webr")
library(webr)
webr::runs.test()
install.packages("quarto")
quarto::quarto_render("hello.qmd")
library(quarto)
quarto::quarto_render("hello.qmd")
quarto::quarto_inspect()
blogdown:::serve_site()
blogdown:::serve_site()
library(quarto)
quarto::quarto_preview()
reticulate::repl_python()
